AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template VPC_Single_Instance_In_Subnet: Sample
  template showing how to create a VPC and add an EC2 instance with an Elastic
  IP address and a security group. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a
  stack from this template.

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Application
          Value: 'Public Subnet'
          # should set auto-assign ip to enable here, but not sure CF can do that
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: 'Private Subnet'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InboundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundSSHNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutBoundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutBoundHTTPSNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  OutBoundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref NetworkAcl
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
#  WebServerInstance:
#    Type: 'AWS::EC2::Instance'
#    DependsOn: AttachGateway
#    Metadata:
#      Comment: Install a simple application
#      'AWS::CloudFormation::Init':
#        config:
#          packages:
#            yum:
#              httpd: []
#          files:
#            /var/www/html/index.html:
#              content: '<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>'
#              mode: '000644'
#              owner: root
#              group: root
#            /etc/cfn/cfn-hup.conf:
#              content: !Join
#                - ''
#                - - |
#                    [main]
#                  - stack=
#                  - !Ref 'AWS::StackId'
#                  - |+
#
#                  - region=
#                  - !Ref 'AWS::Region'
#                  - |+
#
#              mode: '000400'
#              owner: root
#              group: root
#            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
#              content: !Join
#                - ''
#                - - |
#                    [cfn-auto-reloader-hook]
#                  - |
#                    triggers=post.update
#                  - >
#                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
#                  - 'action=/opt/aws/bin/cfn-init -v '
#                  - '         --stack '
#                  - !Ref 'AWS::StackName'
#                  - '         --resource WebServerInstance '
#                  - '         --region '
#                  - !Ref 'AWS::Region'
#                  - |+
#
#                  - |
#                    runas=root
#          services:
#            sysvinit:
#              httpd:
#                enabled: 'true'
#                ensureRunning: 'true'
#              cfn-hup:
#                enabled: 'true'
#                ensureRunning: 'true'
#                files:
#                  - /etc/cfn/cfn-hup.conf
#                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
#    Properties:
#      ImageId: ami-6df1e514
#      InstanceType: t2.micro
#      KeyName: !Ref KeyName
#      NetworkInterfaces:
#        - GroupSet:
#            - !Ref InstanceSecurityGroup
#          AssociatePublicIpAddress: 'true'
#          DeviceIndex: '0'
#          DeleteOnTermination: 'true'
#          SubnetId: !Ref Subnet
#      UserData: !Base64
#        'Fn::Join':
#          - ''
#          - - |
#              #!/bin/bash -xe
#            - |
#              yum update -y aws-cfn-bootstrap
#            - '/opt/aws/bin/cfn-init -v '
#            - '         --stack '
#            - !Ref 'AWS::StackName'
#            - '         --resource WebServerInstance '
#            - '         --region '
#            - !Ref 'AWS::Region'
#            - |+
#
#            - '/opt/aws/bin/cfn-signal -e $? '
#            - '         --stack '
#            - !Ref 'AWS::StackName'
#            - '         --resource WebServerInstance '
#            - '         --region '
#            - !Ref 'AWS::Region'
#            - |+
#
#    CreationPolicy:
#      ResourceSignal:
#        Timeout: PT15M
#  IPAddress:
#    Type: 'AWS::EC2::EIP'
#    DependsOn: AttachGateway
#    Properties:
#      Domain: vpc
#      InstanceId: !Ref WebServerInstance
#Outputs:
#  URL:
#    Value: !Join
#      - ''
#      - - 'http://'
#        - !GetAtt
#          - WebServerInstance
#          - PublicIp
#    Description: Newly created application URL
